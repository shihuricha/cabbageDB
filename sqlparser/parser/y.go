// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"cabbageDB/sql"
	"cabbageDB/sqlparser/ast"
	"cabbageDB/sqlparser/model"
)

type yySymType struct {
	yys       int
	ident     string
	item      interface{}
	statement ast.Stmt
	expr      ast.Expression
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault               = 57429
	yyEofCode               = 57344
	and                     = 57380
	andand                  = 57348
	as                      = 57350
	asc                     = 57375
	avg                     = 57360
	begin                   = 57411
	boolean                 = 57394
	boolkwd                 = 57395
	by                      = 57372
	char                    = 57391
	commit                  = 57416
	count                   = 57361
	create                  = 57385
	cross                   = 57366
	defaultKwd              = 57402
	delete                  = 57420
	desc                    = 57376
	double                  = 57397
	drop                    = 57419
	eq                      = 57387
	yyErrCode               = 57345
	exists                  = 57384
	explain                 = 57417
	falseKwd                = 57359
	float                   = 57396
	floatLit                = 57423
	foreign                 = 57421
	from                    = 57352
	ge                      = 57388
	group                   = 57373
	having                  = 57377
	identifier              = 57346
	ifkwd                   = 57381
	inner                   = 57390
	insert                  = 57409
	intLit                  = 57424
	integer                 = 57399
	intkwd                  = 57398
	into                    = 57406
	is                      = 57354
	join                    = 57367
	key                     = 57401
	le                      = 57389
	left                    = 57368
	like                    = 57356
	limit                   = 57357
	lowerThanSetKeyword     = 57426
	lowerThanStringLitToken = 57425
	maxKwd                  = 57363
	minKwd                  = 57364
	neg                     = 57428
	neq                     = 57382
	neqSynonym              = 57383
	not                     = 57353
	null                    = 57355
	offset                  = 57378
	on                      = 57379
	only                    = 57414
	or                      = 57365
	order                   = 57374
	oror                    = 57349
	outer                   = 57370
	primary                 = 57400
	read                    = 57413
	references              = 57422
	right                   = 57369
	rollback                = 57418
	selectKwd               = 57351
	set                     = 57404
	start                   = 57410
	stringLit               = 57347
	sum                     = 57362
	table                   = 57386
	tableRefPriority        = 57427
	text                    = 57393
	transaction             = 57412
	trueKwd                 = 57358
	unique                  = 57403
	update                  = 57405
	valueKwd                = 57407
	values                  = 57408
	varchar                 = 57392
	where                   = 57371
	write                   = 57415

	yyMaxDepth = 200
	yyTabOfs   = -191
)

var (
	yyPrec = map[int]int{
		lowerThanStringLitToken: 0,
		stringLit:               1,
		lowerThanSetKeyword:     2,
		join:                    3,
		inner:                   3,
		cross:                   3,
		left:                    3,
		right:                   3,
		tableRefPriority:        4,
		on:                      5,
		oror:                    6,
		or:                      6,
		andand:                  7,
		and:                     7,
		eq:                      8,
		ge:                      8,
		le:                      8,
		neq:                     8,
		neqSynonym:              8,
		'>':                     8,
		'<':                     8,
		is:                      8,
		like:                    8,
		'|':                     9,
		'&':                     10,
		'-':                     11,
		'+':                     11,
		'*':                     12,
		'/':                     12,
		'%':                     12,
		'^':                     13,
		neg:                     14,
		not:                     15,
		'(':                     16,
		',':                     17,
	}

	yyXLAT = map[int]int{
		57344: 0,   // $end (136x)
		59:    1,   // ';' (135x)
		57346: 2,   // identifier (131x)
		44:    3,   // ',' (121x)
		57355: 4,   // null (106x)
		57378: 5,   // offset (95x)
		57357: 6,   // limit (93x)
		41:    7,   // ')' (92x)
		57353: 8,   // not (90x)
		57347: 9,   // stringLit (89x)
		57374: 10,  // order (84x)
		57377: 11,  // having (82x)
		57371: 12,  // where (79x)
		57373: 13,  // group (77x)
		57460: 14,  // Identifier (72x)
		57380: 15,  // and (63x)
		57348: 16,  // andand (63x)
		57365: 17,  // or (63x)
		57349: 18,  // oror (63x)
		57367: 19,  // join (62x)
		57400: 20,  // primary (61x)
		57403: 21,  // unique (61x)
		57402: 22,  // defaultKwd (60x)
		57352: 23,  // from (57x)
		57366: 24,  // cross (56x)
		57390: 25,  // inner (56x)
		57368: 26,  // left (56x)
		57369: 27,  // right (56x)
		57379: 28,  // on (55x)
		57424: 29,  // intLit (51x)
		57350: 30,  // as (46x)
		33:    31,  // '!' (44x)
		57360: 32,  // avg (44x)
		57361: 33,  // count (44x)
		57359: 34,  // falseKwd (44x)
		57423: 35,  // floatLit (44x)
		57363: 36,  // maxKwd (44x)
		57364: 37,  // minKwd (44x)
		57362: 38,  // sum (44x)
		57358: 39,  // trueKwd (44x)
		57375: 40,  // asc (43x)
		57376: 41,  // desc (43x)
		57387: 42,  // eq (42x)
		60:    43,  // '<' (40x)
		62:    44,  // '>' (40x)
		57388: 45,  // ge (40x)
		57354: 46,  // is (40x)
		57389: 47,  // le (40x)
		57382: 48,  // neq (40x)
		57383: 49,  // neqSynonym (40x)
		57431: 50,  // BitExpr (38x)
		57471: 51,  // Literal (38x)
		57488: 52,  // SimpleExpr (38x)
		57489: 53,  // SimpleIdent (38x)
		57492: 54,  // SumExpr (38x)
		42:    55,  // '*' (32x)
		37:    56,  // '%' (31x)
		57478: 57,  // PredicateExpr (31x)
		43:    58,  // '+' (28x)
		45:    59,  // '-' (28x)
		47:    60,  // '/' (28x)
		94:    61,  // '^' (28x)
		57356: 62,  // like (28x)
		57432: 63,  // BoolPri (25x)
		57450: 64,  // Expression (25x)
		40:    65,  // '(' (23x)
		57510: 66,  // logAnd (23x)
		57511: 67,  // logOr (23x)
		57497: 68,  // TableName (11x)
		57437: 69,  // ColumnName (8x)
		57467: 70,  // JoinTable (5x)
		57401: 71,  // key (5x)
		57496: 72,  // TableFactor (5x)
		57498: 73,  // TableRef (5x)
		57408: 74,  // values (5x)
		57445: 75,  // CrossJoin (4x)
		57462: 76,  // IdxNameOpt (4x)
		57464: 77,  // InnerJoin (4x)
		57468: 78,  // JoinType (4x)
		57477: 79,  // OuterJoin (4x)
		46:    80,  // '.' (3x)
		57411: 81,  // begin (3x)
		57430: 82,  // BeginStmt (3x)
		57394: 83,  // boolean (3x)
		57395: 84,  // boolkwd (3x)
		57391: 85,  // char (3x)
		57416: 86,  // commit (3x)
		57443: 87,  // CommitStmt (3x)
		57385: 88,  // create (3x)
		57444: 89,  // CreateTableStmt (3x)
		57420: 90,  // delete (3x)
		57446: 91,  // DeleteStmt (3x)
		57397: 92,  // double (3x)
		57419: 93,  // drop (3x)
		57447: 94,  // DropTableStmt (3x)
		57417: 95,  // explain (3x)
		57449: 96,  // ExplainStmt (3x)
		57396: 97,  // float (3x)
		57461: 98,  // IdxName (3x)
		57409: 99,  // insert (3x)
		57465: 100, // InsertIntoStmt (3x)
		57399: 101, // integer (3x)
		57398: 102, // intkwd (3x)
		57370: 103, // outer (3x)
		57413: 104, // read (3x)
		57418: 105, // rollback (3x)
		57480: 106, // RollbackStmt (3x)
		57351: 107, // selectKwd (3x)
		57482: 108, // SelectStmt (3x)
		57404: 109, // set (3x)
		57410: 110, // start (3x)
		57490: 111, // Statement (3x)
		57393: 112, // text (3x)
		57405: 113, // update (3x)
		57502: 114, // UpdateStmt (3x)
		57392: 115, // varchar (3x)
		57372: 116, // by (2x)
		57433: 117, // ByItem (2x)
		57435: 118, // ColumnDef (2x)
		57448: 119, // EscapedTableRef (2x)
		57452: 120, // Field (2x)
		57455: 121, // FieldLen (2x)
		57472: 122, // NUM (2x)
		57481: 123, // RowValue (2x)
		57486: 124, // SetColumn (2x)
		57386: 125, // table (2x)
		57508: 126, // WhereClause (2x)
		57509: 127, // WhereClauseOptional (2x)
		57434: 128, // ByList (1x)
		57436: 129, // ColumnList (1x)
		57438: 130, // ColumnNameList (1x)
		57439: 131, // ColumnNameListOpt (1x)
		57440: 132, // ColumnOption (1x)
		57441: 133, // ColumnOptions (1x)
		57442: 134, // ColumnType (1x)
		57384: 135, // exists (1x)
		57451: 136, // ExpressionList (1x)
		57453: 137, // FieldAsName (1x)
		57454: 138, // FieldAsNameOpt (1x)
		57456: 139, // FieldList (1x)
		57421: 140, // foreign (1x)
		57457: 141, // FromOpt (1x)
		57458: 142, // GroupByClause (1x)
		57459: 143, // HavingClause (1x)
		57381: 144, // ifkwd (1x)
		57463: 145, // IfNotExists (1x)
		57406: 146, // into (1x)
		57466: 147, // IntoOpt (1x)
		57469: 148, // LengthNum (1x)
		57470: 149, // LikeOperation (1x)
		57512: 150, // notEq (1x)
		57473: 151, // OffsetOpt (1x)
		57414: 152, // only (1x)
		57474: 153, // Order (1x)
		57475: 154, // OrderBy (1x)
		57476: 155, // OrderByOptional (1x)
		57479: 156, // ReadOpt (1x)
		57422: 157, // references (1x)
		57513: 158, // root (1x)
		57483: 159, // SelectStmtFieldList (1x)
		57484: 160, // SelectStmtGroup (1x)
		57485: 161, // SelectStmtLimit (1x)
		57487: 162, // SetColumnList (1x)
		57491: 163, // StatementList (1x)
		57493: 164, // TableAsName (1x)
		57494: 165, // TableAsNameOpt (1x)
		57495: 166, // TableConstraint (1x)
		57499: 167, // TableRefs (1x)
		57500: 168, // TableRefsClause (1x)
		57412: 169, // transaction (1x)
		57501: 170, // TransactionOpt (1x)
		57504: 171, // Values (1x)
		57505: 172, // ValuesList (1x)
		57506: 173, // ValuesOpt (1x)
		57507: 174, // Version (1x)
		57415: 175, // write (1x)
		57429: 176, // $default (0x)
		38:    177, // '&' (0x)
		124:   178, // '|' (0x)
		57345: 179, // error (0x)
		57426: 180, // lowerThanSetKeyword (0x)
		57425: 181, // lowerThanStringLitToken (0x)
		57428: 182, // neg (0x)
		57427: 183, // tableRefPriority (0x)
		57407: 184, // valueKwd (0x)
		57503: 185, // ValueSym (0x)
	}

	yySymNames = []string{
		"$end",
		"';'",
		"identifier",
		"','",
		"null",
		"offset",
		"limit",
		"')'",
		"not",
		"stringLit",
		"order",
		"having",
		"where",
		"group",
		"Identifier",
		"and",
		"andand",
		"or",
		"oror",
		"join",
		"primary",
		"unique",
		"defaultKwd",
		"from",
		"cross",
		"inner",
		"left",
		"right",
		"on",
		"intLit",
		"as",
		"'!'",
		"avg",
		"count",
		"falseKwd",
		"floatLit",
		"maxKwd",
		"minKwd",
		"sum",
		"trueKwd",
		"asc",
		"desc",
		"eq",
		"'<'",
		"'>'",
		"ge",
		"is",
		"le",
		"neq",
		"neqSynonym",
		"BitExpr",
		"Literal",
		"SimpleExpr",
		"SimpleIdent",
		"SumExpr",
		"'*'",
		"'%'",
		"PredicateExpr",
		"'+'",
		"'-'",
		"'/'",
		"'^'",
		"like",
		"BoolPri",
		"Expression",
		"'('",
		"logAnd",
		"logOr",
		"TableName",
		"ColumnName",
		"JoinTable",
		"key",
		"TableFactor",
		"TableRef",
		"values",
		"CrossJoin",
		"IdxNameOpt",
		"InnerJoin",
		"JoinType",
		"OuterJoin",
		"'.'",
		"begin",
		"BeginStmt",
		"boolean",
		"boolkwd",
		"char",
		"commit",
		"CommitStmt",
		"create",
		"CreateTableStmt",
		"delete",
		"DeleteStmt",
		"double",
		"drop",
		"DropTableStmt",
		"explain",
		"ExplainStmt",
		"float",
		"IdxName",
		"insert",
		"InsertIntoStmt",
		"integer",
		"intkwd",
		"outer",
		"read",
		"rollback",
		"RollbackStmt",
		"selectKwd",
		"SelectStmt",
		"set",
		"start",
		"Statement",
		"text",
		"update",
		"UpdateStmt",
		"varchar",
		"by",
		"ByItem",
		"ColumnDef",
		"EscapedTableRef",
		"Field",
		"FieldLen",
		"NUM",
		"RowValue",
		"SetColumn",
		"table",
		"WhereClause",
		"WhereClauseOptional",
		"ByList",
		"ColumnList",
		"ColumnNameList",
		"ColumnNameListOpt",
		"ColumnOption",
		"ColumnOptions",
		"ColumnType",
		"exists",
		"ExpressionList",
		"FieldAsName",
		"FieldAsNameOpt",
		"FieldList",
		"foreign",
		"FromOpt",
		"GroupByClause",
		"HavingClause",
		"ifkwd",
		"IfNotExists",
		"into",
		"IntoOpt",
		"LengthNum",
		"LikeOperation",
		"notEq",
		"OffsetOpt",
		"only",
		"Order",
		"OrderBy",
		"OrderByOptional",
		"ReadOpt",
		"references",
		"root",
		"SelectStmtFieldList",
		"SelectStmtGroup",
		"SelectStmtLimit",
		"SetColumnList",
		"StatementList",
		"TableAsName",
		"TableAsNameOpt",
		"TableConstraint",
		"TableRefs",
		"TableRefsClause",
		"transaction",
		"TransactionOpt",
		"Values",
		"ValuesList",
		"ValuesOpt",
		"Version",
		"write",
		"$default",
		"'&'",
		"'|'",
		"error",
		"lowerThanSetKeyword",
		"lowerThanStringLitToken",
		"neg",
		"tableRefPriority",
		"valueKwd",
		"ValueSym",
	}

	yyTokenLiteralStrings = map[int]string{
		57346: "identifier",
		57355: "NULL",
		57378: "OFFSET",
		57357: "LIMIT",
		57353: "NOT",
		57347: "string literal",
		57374: "ORDER",
		57377: "HAVING",
		57371: "WHERE",
		57373: "GROUP",
		57380: "AND",
		57348: "&&",
		57365: "OR",
		57349: "||",
		57367: "JOIN",
		57400: "PRIMARY",
		57403: "UNIQUE",
		57402: "DEFAULT",
		57352: "FROM",
		57366: "CROSS",
		57390: "INNER",
		57368: "LEFT",
		57369: "RIGHT",
		57379: "ON",
		57424: "integer literal",
		57350: "AS",
		57360: "AVG",
		57361: "COUNT",
		57359: "FALSE",
		57423: "floating-point literal",
		57363: "MAX",
		57364: "MIN",
		57362: "SUM",
		57358: "TRUE",
		57375: "ASC",
		57376: "DESC",
		57387: "=",
		57388: ">=",
		57354: "IS",
		57389: "<=",
		57382: "!=",
		57383: "<>",
		57356: "LIKE",
		57401: "KEY",
		57408: "VALUES",
		57411: "BEGIN",
		57394: "BOOLEAN",
		57395: "BOOL",
		57391: "CHAR",
		57416: "COMMIT",
		57385: "CREATE",
		57420: "DELETE",
		57397: "Double",
		57419: "DROP",
		57417: "EXPLAIN",
		57396: "FLOAT",
		57409: "INSERT",
		57399: "Integer",
		57398: "Int",
		57370: "OUTER",
		57413: "READ",
		57418: "ROLLBACK",
		57351: "SELECT",
		57404: "SET",
		57410: "START",
		57393: "TEXT",
		57405: "UPDATE",
		57392: "VARCHAR",
		57372: "BY",
		57386: "TABLE",
		57384: "EXISTS",
		57421: "FOREIGN",
		57381: "IF",
		57406: "INTO",
		57414: "ONLY",
		57422: "REFERENCES",
		57412: "TRANSACTION",
		57415: "WRITE",
		57407: "VALUE",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {158, 1},
		2:   {163, 1},
		3:   {163, 3},
		4:   {111, 1},
		5:   {111, 1},
		6:   {111, 1},
		7:   {111, 1},
		8:   {111, 1},
		9:   {111, 1},
		10:  {111, 1},
		11:  {111, 1},
		12:  {111, 1},
		13:  {111, 1},
		14:  {14, 1},
		15:  {139, 1},
		16:  {139, 3},
		17:  {120, 1},
		18:  {120, 3},
		19:  {120, 2},
		20:  {138, 0},
		21:  {138, 1},
		22:  {137, 1},
		23:  {137, 2},
		24:  {137, 1},
		25:  {137, 2},
		26:  {159, 1},
		27:  {141, 0},
		28:  {141, 2},
		29:  {108, 9},
		30:  {64, 3},
		31:  {64, 3},
		32:  {64, 2},
		33:  {64, 1},
		34:  {63, 3},
		35:  {63, 3},
		36:  {63, 3},
		37:  {63, 3},
		38:  {63, 3},
		39:  {63, 3},
		40:  {63, 3},
		41:  {63, 1},
		42:  {149, 2},
		43:  {149, 3},
		44:  {57, 3},
		45:  {57, 1},
		46:  {50, 3},
		47:  {50, 3},
		48:  {50, 3},
		49:  {50, 3},
		50:  {50, 3},
		51:  {50, 3},
		52:  {50, 2},
		53:  {50, 1},
		54:  {53, 1},
		55:  {53, 3},
		56:  {51, 1},
		57:  {51, 1},
		58:  {51, 1},
		59:  {51, 1},
		60:  {51, 1},
		61:  {51, 1},
		62:  {52, 1},
		63:  {52, 1},
		64:  {52, 1},
		65:  {54, 4},
		66:  {54, 4},
		67:  {54, 4},
		68:  {54, 4},
		69:  {54, 4},
		70:  {54, 4},
		71:  {67, 1},
		72:  {67, 1},
		73:  {66, 1},
		74:  {66, 1},
		75:  {150, 1},
		76:  {150, 1},
		77:  {168, 0},
		78:  {168, 1},
		79:  {167, 1},
		80:  {167, 3},
		81:  {119, 1},
		82:  {73, 1},
		83:  {73, 1},
		84:  {72, 2},
		85:  {68, 1},
		86:  {165, 0},
		87:  {165, 1},
		88:  {164, 1},
		89:  {164, 2},
		90:  {70, 3},
		91:  {70, 5},
		92:  {70, 5},
		93:  {75, 2},
		94:  {77, 2},
		95:  {77, 1},
		96:  {79, 2},
		97:  {79, 3},
		98:  {78, 1},
		99:  {78, 1},
		100: {127, 0},
		101: {127, 1},
		102: {126, 2},
		103: {160, 0},
		104: {160, 1},
		105: {136, 1},
		106: {136, 3},
		107: {142, 3},
		108: {128, 1},
		109: {128, 3},
		110: {117, 2},
		111: {153, 0},
		112: {153, 1},
		113: {153, 1},
		114: {143, 0},
		115: {143, 2},
		116: {155, 0},
		117: {155, 1},
		118: {154, 3},
		119: {161, 0},
		120: {161, 2},
		121: {151, 0},
		122: {151, 2},
		123: {89, 7},
		124: {145, 0},
		125: {145, 3},
		126: {129, 1},
		127: {129, 3},
		128: {129, 3},
		129: {118, 3},
		130: {134, 2},
		131: {134, 2},
		132: {134, 1},
		133: {134, 1},
		134: {134, 1},
		135: {134, 1},
		136: {134, 1},
		137: {134, 1},
		138: {134, 1},
		139: {133, 0},
		140: {133, 2},
		141: {132, 2},
		142: {132, 1},
		143: {132, 2},
		144: {132, 2},
		145: {132, 1},
		146: {69, 1},
		147: {121, 3},
		148: {148, 1},
		149: {174, 1},
		150: {174, 0},
		151: {122, 1},
		152: {98, 1},
		153: {76, 0},
		154: {76, 1},
		155: {166, 6},
		156: {166, 6},
		157: {166, 5},
		158: {166, 11},
		159: {124, 3},
		160: {162, 1},
		161: {162, 3},
		162: {114, 5},
		163: {147, 0},
		164: {147, 1},
		165: {130, 1},
		166: {130, 3},
		167: {131, 0},
		168: {131, 3},
		169: {185, 1},
		170: {185, 1},
		171: {172, 1},
		172: {172, 3},
		173: {123, 3},
		174: {173, 0},
		175: {173, 1},
		176: {171, 3},
		177: {171, 1},
		178: {100, 6},
		179: {170, 0},
		180: {170, 1},
		181: {156, 2},
		182: {156, 2},
		183: {156, 0},
		184: {82, 4},
		185: {82, 1},
		186: {87, 1},
		187: {106, 1},
		188: {96, 2},
		189: {94, 3},
		190: {91, 5},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [320][]uint16{
		// 0
		{81: 210, 199, 86: 211, 200, 206, 196, 215, 204, 93: 214, 203, 213, 202, 99: 208, 198, 105: 212, 201, 205, 195, 110: 209, 194, 113: 207, 197, 158: 192, 163: 193},
		{191},
		{190, 509},
		{189, 189},
		{187, 187},
		// 5
		{186, 186},
		{185, 185},
		{184, 184},
		{183, 183},
		{182, 182},
		// 10
		{181, 181},
		{180, 180},
		{179, 179},
		{178, 178},
		{2: 217, 4: 229, 8: 222, 232, 14: 428, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 427, 57: 224, 63: 223, 429, 120: 425, 139: 426, 159: 430},
		// 15
		{125: 355},
		{2: 217, 14: 218, 68: 342},
		{2: 28, 146: 319, 320},
		{12, 12, 29: 12, 104: 12, 169: 310, 311},
		{6, 6},
		// 20
		{5, 5},
		{4, 4},
		{81: 210, 199, 86: 211, 200, 206, 196, 215, 204, 93: 214, 203, 213, 202, 99: 208, 198, 105: 212, 201, 205, 195, 110: 209, 309, 113: 207, 197},
		{125: 307},
		{23: 216},
		// 25
		{2: 217, 14: 218, 68: 219},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 15: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 30: 177, 40: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 55: 177, 177, 58: 177, 177, 177, 177, 177, 65: 177, 74: 177, 80: 177, 83: 177, 177, 177, 92: 177, 97: 177, 101: 177, 177, 109: 177, 112: 177, 115: 177},
		{106, 106, 106, 106, 5: 106, 106, 10: 106, 106, 106, 106, 19: 106, 24: 106, 106, 106, 106, 106, 30: 106, 65: 106, 74: 106, 109: 106},
		{12: 220},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 221},
		// 30
		{1, 1, 15: 251, 250, 249, 248, 66: 246, 245},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 306},
		{158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 15: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 30: 158, 40: 158, 158, 291, 294, 292, 293, 290, 295, 297, 298, 150: 296},
		{150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 15: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 30: 150, 40: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150},
		{146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 15: 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 30: 146, 40: 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 55: 273, 275, 58: 271, 272, 274, 276, 283},
		// 35
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 270, 236, 227, 235, 237},
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 15: 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 30: 138, 40: 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 55: 138, 138, 58: 138, 138, 138, 138, 138},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 15: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 30: 137, 40: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 55: 137, 137, 58: 137, 137, 137, 137, 137, 80: 268},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 15: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 30: 135, 40: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 55: 135, 135, 58: 135, 135, 135, 135, 135},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 15: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 30: 134, 40: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 55: 134, 134, 58: 134, 134, 134, 134, 134},
		// 40
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 15: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 30: 133, 40: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 55: 133, 133, 58: 133, 133, 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 15: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 30: 132, 40: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 55: 132, 132, 58: 132, 132, 132, 132, 132},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 15: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 30: 131, 40: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 55: 131, 131, 58: 131, 131, 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 15: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 30: 130, 40: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 55: 130, 130, 58: 130, 130, 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 15: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 30: 129, 40: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 55: 129, 129, 58: 129, 129, 129, 129, 129},
		// 45
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 15: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 30: 128, 40: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 55: 128, 128, 58: 128, 128, 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 15: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 30: 127, 40: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 55: 127, 127, 58: 127, 127, 127, 127, 127},
		{65: 265},
		{65: 260},
		{65: 257},
		// 50
		{65: 254},
		{65: 243},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 244},
		{7: 247, 15: 251, 250, 249, 248, 66: 246, 245},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 253},
		// 55
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 252},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 15: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 30: 121, 40: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 55: 121, 121, 58: 121, 121, 121, 121, 121},
		{2: 120, 4: 120, 8: 120, 120, 29: 120, 31: 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{2: 119, 4: 119, 8: 119, 119, 29: 119, 31: 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{2: 118, 4: 118, 8: 118, 118, 29: 118, 31: 118, 118, 118, 118, 118, 118, 118, 118, 118},
		// 60
		{2: 117, 4: 117, 8: 117, 117, 29: 117, 31: 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 15: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 30: 160, 40: 160, 160, 66: 246, 245},
		{161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 15: 251, 250, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 30: 161, 40: 161, 161, 66: 246, 245},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 255},
		{7: 256, 15: 251, 250, 249, 248, 66: 246, 245},
		// 65
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 15: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 30: 122, 40: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 55: 122, 122, 58: 122, 122, 122, 122, 122},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 258},
		{7: 259, 15: 251, 250, 249, 248, 66: 246, 245},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 15: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 30: 123, 40: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 55: 123, 123, 58: 123, 123, 123, 123, 123},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 262, 57: 224, 63: 223, 261},
		// 70
		{7: 264, 15: 251, 250, 249, 248, 66: 246, 245},
		{7: 263},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 15: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 30: 124, 40: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 55: 124, 124, 58: 124, 124, 124, 124, 124},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 15: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 30: 125, 40: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 55: 125, 125, 58: 125, 125, 125, 125, 125},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 266},
		// 75
		{7: 267, 15: 251, 250, 249, 248, 66: 246, 245},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 15: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 30: 126, 40: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 55: 126, 126, 58: 126, 126, 126, 126, 126},
		{2: 217, 14: 269},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 15: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 30: 136, 40: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 55: 136, 136, 58: 136, 136, 136, 136, 136},
		{139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 15: 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 30: 139, 40: 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 55: 139, 139, 58: 139, 139, 139, 139, 139},
		// 80
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 282, 236, 227, 235, 237},
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 281, 236, 227, 235, 237},
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 280, 236, 227, 235, 237},
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 279, 236, 227, 235, 237},
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 278, 236, 227, 235, 237},
		// 85
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 277, 236, 227, 235, 237},
		{140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 15: 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 30: 140, 40: 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 55: 140, 140, 58: 140, 140, 140, 140, 140},
		{141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 15: 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 30: 141, 40: 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 55: 141, 141, 58: 141, 141, 141, 276, 141},
		{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 15: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 30: 142, 40: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 55: 142, 142, 58: 142, 142, 142, 276, 142},
		{143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 15: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 30: 143, 40: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 55: 143, 143, 58: 143, 143, 143, 276, 143},
		// 90
		{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 15: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 30: 144, 40: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 55: 273, 275, 58: 144, 144, 274, 276, 144},
		{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 15: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 30: 145, 40: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 55: 273, 275, 58: 145, 145, 274, 276, 145},
		{2: 217, 14: 284, 56: 285, 149: 286},
		{56: 289},
		{2: 217, 14: 287},
		// 95
		{147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 15: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 30: 147, 40: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147},
		{56: 288},
		{148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 15: 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 30: 148, 40: 148, 148, 148, 148, 148, 148, 148, 148, 148, 148},
		{149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 15: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 30: 149, 40: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149},
		{4: 305},
		// 100
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 304},
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 303},
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 302},
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 301},
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 300},
		// 105
		{2: 217, 4: 229, 9: 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 299},
		{2: 116, 4: 116, 9: 116, 29: 116, 31: 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{2: 115, 4: 115, 9: 115, 29: 115, 31: 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 15: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 30: 151, 40: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151},
		{152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 15: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 30: 152, 40: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		// 110
		{153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 15: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 30: 153, 40: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		{154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 15: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 30: 154, 40: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154},
		{155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 15: 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 30: 155, 40: 155, 155, 155, 155, 155, 155, 155, 155, 155, 155},
		{156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 15: 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 30: 156, 40: 156, 156, 156, 156, 156, 156, 156, 156, 156, 156},
		{157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 15: 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 30: 157, 40: 157, 157, 157, 157, 157, 157, 157, 157, 157, 157},
		// 115
		{159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 15: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 30: 159, 40: 159, 159, 66: 246, 245},
		{2: 217, 14: 218, 68: 308},
		{2, 2},
		{3, 3},
		{11, 11, 29: 11, 104: 11},
		// 120
		{8, 8, 29: 8, 104: 312, 156: 313},
		{152: 317, 175: 318},
		{41, 41, 29: 315, 122: 314, 174: 316},
		{42, 42},
		{40, 40, 7: 40},
		// 125
		{7, 7},
		{10, 10, 29: 10},
		{9, 9, 29: 9},
		{2: 27},
		{2: 217, 14: 218, 68: 321},
		// 130
		{65: 322, 74: 24, 131: 323},
		{2: 217, 14: 336, 69: 337, 130: 338},
		{74: 324},
		{65: 327, 123: 325, 172: 326},
		{20, 20, 3: 20},
		// 135
		{13, 13, 3: 334},
		{2: 217, 4: 229, 7: 17, 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 328, 171: 330, 173: 329},
		{3: 14, 7: 14, 15: 251, 250, 249, 248, 66: 246, 245},
		{7: 333},
		{3: 331, 7: 16},
		// 140
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 332},
		{3: 15, 7: 15, 15: 251, 250, 249, 248, 66: 246, 245},
		{18, 18, 3: 18},
		{65: 327, 123: 335},
		{19, 19, 3: 19},
		// 145
		{3: 45, 7: 45, 42: 45, 83: 45, 45, 45, 92: 45, 97: 45, 101: 45, 45, 112: 45, 115: 45},
		{3: 26, 7: 26},
		{3: 339, 7: 340},
		{2: 217, 14: 336, 69: 341},
		{74: 23},
		// 150
		{3: 25, 7: 25},
		{109: 343},
		{2: 217, 14: 336, 69: 344, 124: 345, 162: 346},
		{42: 353},
		{31, 31, 3: 31, 12: 31},
		// 155
		{91, 91, 3: 349, 12: 348, 126: 347, 350},
		{90, 90, 5: 90, 90, 10: 90, 90, 13: 90},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 352},
		{2: 217, 14: 336, 69: 344, 124: 351},
		{29, 29},
		// 160
		{30, 30, 3: 30, 12: 30},
		{89, 89, 5: 89, 89, 10: 89, 89, 13: 89, 15: 251, 250, 249, 248, 66: 246, 245},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 354},
		{32, 32, 3: 32, 12: 32, 15: 251, 250, 249, 248, 66: 246, 245},
		{2: 67, 144: 357, 356},
		// 165
		{2: 217, 14: 218, 68: 360},
		{8: 358},
		{135: 359},
		{2: 66},
		{65: 361},
		// 170
		{2: 217, 14: 336, 69: 364, 118: 363, 129: 362},
		{3: 392, 7: 391},
		{3: 65, 7: 65},
		{83: 369, 370, 366, 92: 372, 97: 371, 101: 374, 373, 112: 368, 115: 367, 134: 365},
		{3: 52, 52, 7: 52, 52, 20: 52, 52, 52, 133: 381},
		// 175
		{65: 376, 121: 380},
		{65: 376, 121: 375},
		{3: 59, 59, 7: 59, 59, 20: 59, 59, 59},
		{3: 58, 58, 7: 58, 58, 20: 58, 58, 58},
		{3: 57, 57, 7: 57, 57, 20: 57, 57, 57},
		// 180
		{3: 56, 56, 7: 56, 56, 20: 56, 56, 56},
		{3: 55, 55, 7: 55, 55, 20: 55, 55, 55},
		{3: 54, 54, 7: 54, 54, 20: 54, 54, 54},
		{3: 53, 53, 7: 53, 53, 20: 53, 53, 53},
		{3: 60, 60, 7: 60, 60, 20: 60, 60, 60},
		// 185
		{29: 315, 122: 378, 148: 377},
		{7: 379},
		{7: 43},
		{3: 44, 44, 7: 44, 44, 20: 44, 44, 44},
		{3: 61, 61, 7: 61, 61, 20: 61, 61, 61},
		// 190
		{3: 62, 384, 7: 62, 383, 20: 385, 387, 386, 132: 382},
		{3: 51, 51, 7: 51, 51, 20: 51, 51, 51},
		{4: 390},
		{3: 49, 49, 7: 49, 49, 20: 49, 49, 49},
		{71: 389},
		// 195
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 388},
		{3: 46, 46, 7: 46, 46, 20: 46, 46, 46},
		{3: 47, 47, 7: 47, 47, 15: 251, 250, 249, 248, 20: 47, 47, 47, 66: 246, 245},
		{3: 48, 48, 7: 48, 48, 20: 48, 48, 48},
		{3: 50, 50, 7: 50, 50, 20: 50, 50, 50},
		// 200
		{68, 68},
		{2: 217, 14: 336, 20: 395, 396, 69: 364, 71: 397, 118: 393, 140: 398, 166: 394},
		{3: 64, 7: 64},
		{3: 63, 7: 63},
		{71: 420},
		// 205
		{71: 415},
		{2: 217, 14: 400, 65: 38, 76: 410},
		{71: 399},
		{2: 217, 14: 400, 65: 38, 76: 401},
		{65: 37},
		// 210
		{65: 402},
		{2: 217, 14: 336, 69: 403},
		{7: 404},
		{157: 405},
		{2: 217, 14: 218, 68: 406},
		// 215
		{65: 407},
		{2: 217, 14: 336, 69: 408},
		{7: 409},
		{3: 33, 7: 33},
		{65: 411},
		// 220
		{2: 217, 14: 412, 98: 413},
		{7: 39},
		{7: 414},
		{3: 34, 7: 34},
		{2: 217, 14: 400, 65: 38, 76: 416},
		// 225
		{65: 417},
		{2: 217, 14: 412, 98: 418},
		{7: 419},
		{3: 35, 7: 35},
		{2: 217, 14: 400, 65: 38, 76: 421},
		// 230
		{65: 422},
		{2: 217, 14: 412, 98: 423},
		{7: 424},
		{3: 36, 7: 36},
		{176, 176, 3: 176, 5: 176, 176, 10: 176, 176, 176, 176, 23: 176},
		// 235
		{165, 165, 3: 507, 5: 165, 165, 10: 165, 165, 165, 165, 23: 165},
		{174, 174, 3: 174, 5: 174, 174, 10: 174, 174, 174, 174, 23: 174},
		{137, 137, 137, 137, 5: 137, 137, 9: 137, 137, 137, 137, 137, 15: 137, 137, 137, 137, 23: 137, 30: 137, 42: 137, 137, 137, 137, 137, 137, 137, 137, 55: 137, 137, 58: 137, 137, 137, 137, 137, 80: 505},
		{171, 171, 217, 171, 5: 171, 171, 9: 502, 171, 171, 171, 171, 500, 251, 250, 249, 248, 23: 171, 30: 501, 66: 246, 245, 137: 499, 498},
		{164, 164, 5: 164, 164, 10: 164, 164, 164, 164, 23: 431, 141: 432},
		// 240
		{114, 114, 217, 5: 114, 114, 10: 114, 114, 114, 114, 218, 68: 469, 70: 468, 72: 467, 466, 119: 465, 167: 464, 463},
		{91, 91, 5: 91, 91, 10: 91, 91, 348, 91, 126: 347, 433},
		{88, 88, 5: 88, 88, 10: 88, 88, 13: 436, 142: 435, 160: 434},
		{77, 77, 5: 77, 77, 10: 77, 443, 143: 442},
		{87, 87, 5: 87, 87, 10: 87, 87},
		// 245
		{116: 437},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 438, 136: 439},
		{86, 86, 3: 86, 5: 86, 86, 10: 86, 86, 15: 251, 250, 249, 248, 66: 246, 245},
		{84, 84, 3: 440, 5: 84, 84, 10: 84, 84},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 441},
		// 250
		{85, 85, 3: 85, 5: 85, 85, 10: 85, 85, 15: 251, 250, 249, 248, 66: 246, 245},
		{75, 75, 5: 75, 75, 10: 447, 154: 446, 445},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 444},
		{76, 76, 5: 76, 76, 10: 76, 15: 251, 250, 249, 248, 66: 246, 245},
		{72, 72, 5: 72, 458, 161: 457},
		// 255
		{74, 74, 5: 74, 74},
		{116: 448},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 449, 117: 450, 128: 451},
		{80, 80, 3: 80, 5: 80, 80, 15: 251, 250, 249, 248, 40: 455, 456, 66: 246, 245, 153: 454},
		{83, 83, 3: 83, 5: 83, 83},
		// 260
		{73, 73, 3: 452, 5: 73, 73},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 449, 117: 453},
		{82, 82, 3: 82, 5: 82, 82},
		{81, 81, 3: 81, 5: 81, 81},
		{79, 79, 3: 79, 5: 79, 79},
		// 265
		{78, 78, 3: 78, 5: 78, 78},
		{70, 70, 5: 461, 151: 460},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 459},
		{71, 71, 5: 71, 15: 251, 250, 249, 248, 66: 246, 245},
		{162, 162},
		// 270
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 462},
		{69, 69, 15: 251, 250, 249, 248, 66: 246, 245},
		{163, 163, 5: 163, 163, 10: 163, 163, 163, 163},
		{113, 113, 3: 496, 5: 113, 113, 10: 113, 113, 113, 113},
		{112, 112, 3: 112, 5: 112, 112, 10: 112, 112, 112, 112},
		// 275
		{110, 110, 3: 110, 5: 110, 110, 10: 110, 110, 110, 110, 19: 480, 24: 478, 479, 482, 483, 75: 475, 77: 476, 481, 477},
		{109, 109, 3: 109, 5: 109, 109, 10: 109, 109, 109, 109, 19: 109, 24: 109, 109, 109, 109, 109},
		{108, 108, 3: 108, 5: 108, 108, 10: 108, 108, 108, 108, 19: 108, 24: 108, 108, 108, 108, 108},
		{105, 105, 217, 105, 5: 105, 105, 10: 105, 105, 105, 105, 472, 19: 105, 24: 105, 105, 105, 105, 105, 30: 473, 164: 471, 470},
		{107, 107, 3: 107, 5: 107, 107, 10: 107, 107, 107, 107, 19: 107, 24: 107, 107, 107, 107, 107},
		// 280
		{104, 104, 3: 104, 5: 104, 104, 10: 104, 104, 104, 104, 19: 104, 24: 104, 104, 104, 104, 104},
		{103, 103, 3: 103, 5: 103, 103, 10: 103, 103, 103, 103, 19: 103, 24: 103, 103, 103, 103, 103},
		{2: 217, 14: 474},
		{102, 102, 3: 102, 5: 102, 102, 10: 102, 102, 102, 102, 19: 102, 24: 102, 102, 102, 102, 102},
		{2: 217, 14: 218, 68: 469, 70: 468, 72: 467, 495},
		// 285
		{2: 217, 14: 218, 68: 469, 70: 468, 72: 467, 492},
		{2: 217, 14: 218, 68: 469, 70: 468, 72: 467, 489},
		{19: 488},
		{19: 487},
		{2: 96},
		// 290
		{19: 484, 103: 485},
		{19: 93, 103: 93},
		{19: 92, 103: 92},
		{2: 95},
		{19: 486},
		// 295
		{2: 94},
		{2: 97},
		{2: 98},
		{19: 480, 24: 478, 479, 482, 483, 490, 75: 475, 77: 476, 481, 477},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 491},
		// 300
		{99, 99, 3: 99, 5: 99, 99, 10: 99, 99, 99, 99, 15: 251, 250, 249, 248, 99, 24: 99, 99, 99, 99, 99, 66: 246, 245},
		{19: 480, 24: 478, 479, 482, 483, 493, 75: 475, 77: 476, 481, 477},
		{2: 217, 4: 229, 8: 222, 232, 14: 228, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 57: 224, 63: 223, 494},
		{100, 100, 3: 100, 5: 100, 100, 10: 100, 100, 100, 100, 15: 251, 250, 249, 248, 100, 24: 100, 100, 100, 100, 100, 66: 246, 245},
		{101, 101, 3: 101, 5: 101, 101, 10: 101, 101, 101, 101, 19: 101, 24: 101, 101, 101, 101, 101, 75: 475, 77: 476, 481, 477},
		// 305
		{2: 217, 14: 218, 68: 469, 70: 468, 72: 467, 466, 119: 497},
		{111, 111, 3: 111, 5: 111, 111, 10: 111, 111, 111, 111},
		{172, 172, 3: 172, 5: 172, 172, 10: 172, 172, 172, 172, 23: 172},
		{170, 170, 3: 170, 5: 170, 170, 10: 170, 170, 170, 170, 23: 170},
		{169, 169, 3: 169, 5: 169, 169, 10: 169, 169, 169, 169, 23: 169},
		// 310
		{2: 217, 9: 504, 14: 503},
		{167, 167, 3: 167, 5: 167, 167, 10: 167, 167, 167, 167, 23: 167},
		{168, 168, 3: 168, 5: 168, 168, 10: 168, 168, 168, 168, 23: 168},
		{166, 166, 3: 166, 5: 166, 166, 10: 166, 166, 166, 166, 23: 166},
		{2: 217, 14: 269, 55: 506},
		// 315
		{173, 173, 3: 173, 5: 173, 173, 10: 173, 173, 173, 173, 23: 173},
		{2: 217, 4: 229, 8: 222, 232, 14: 428, 29: 231, 31: 226, 238, 239, 234, 230, 241, 242, 240, 233, 50: 225, 236, 227, 235, 237, 427, 57: 224, 63: 223, 429, 120: 508},
		{175, 175, 3: 175, 5: 175, 175, 10: 175, 175, 175, 175, 23: 175},
		{81: 210, 199, 86: 211, 200, 206, 196, 215, 204, 93: 214, 203, 213, 202, 99: 208, 198, 105: 212, 201, 205, 195, 110: 209, 510, 113: 207, 197},
		{188, 188},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 179

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].statement != nil {
				yylex.(*Parser).Result = append(yylex.(*Parser).Result, yyS[yypt-0].statement)
			}
		}
	case 3:
		{
			if yyS[yypt-0].statement != nil {
				yylex.(*Parser).Result = append(yylex.(*Parser).Result, yyS[yypt-0].statement)
			}
		}
	case 15:
		{
			var fieldList []*ast.ExprAS
			field := yyS[yypt-0].item.(*ast.ExprAS)
			yyVAL.item = append(fieldList, field)
		}
	case 16:
		{
			fieldList1 := yyS[yypt-2].item.([]*ast.ExprAS)
			field := yyS[yypt-0].item.(*ast.ExprAS)
			yyVAL.item = append(fieldList1, field)
		}
	case 17:
		{
			yyVAL.item = &ast.ExprAS{Expr: nil}
		}
	case 18:
		{
			field := &ast.Field{TableName: model.LowStr(yyS[yypt-2].ident)}
			yyVAL.item = &ast.ExprAS{Expr: field}
		}
	case 19:
		{
			expr := yyS[yypt-1].expr.(ast.Expression)
			asName := yyS[yypt-0].item.(string)
			yyVAL.item = &ast.ExprAS{Expr: expr, As: asName}
		}
	case 20:
		{
			yyVAL.item = ""
		}
	case 21:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 22:
		{
			yyVAL.item = yyS[yypt-0].ident
		}
	case 23:
		{
			yyVAL.item = yyS[yypt-0].ident
		}
	case 24:
		{
			yyVAL.item = yyS[yypt-0].ident
		}
	case 25:
		{
			yyVAL.item = yyS[yypt-0].ident
		}
	case 26:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 27:
		{
			var fromList []ast.FromItem
			yyVAL.item = fromList
		}
	case 28:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 29:
		{
			st := &ast.SelectStmt{
				Select: yyS[yypt-7].item.([]*ast.ExprAS),
				From:   yyS[yypt-6].item.([]ast.FromItem),
			}
			if yyS[yypt-5].item != nil {
				st.Where = yyS[yypt-5].item.(ast.Expression)
			}
			if yyS[yypt-4].item != nil {
				st.GroupBy = yyS[yypt-4].item.([]ast.Expression)
			}
			if yyS[yypt-3].item != nil {
				st.Having = yyS[yypt-3].item.(ast.Expression)
			}
			if yyS[yypt-2].item != nil {
				st.Order = yyS[yypt-2].item.([]*ast.Order)
			}
			if yyS[yypt-1].item != nil {
				st.Limit = yyS[yypt-1].item.(ast.Expression)
			}
			if yyS[yypt-0].item != nil {
				st.Offset = yyS[yypt-0].item.(ast.Expression)
			}
			yyVAL.statement = st
		}
	case 30:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.OrOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 31:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.AndOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 32:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.NotOper{L: yyS[yypt-0].expr},
			}
		}
	case 34:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.IsNullOper{L: yyS[yypt-2].expr},
			}
		}
	case 35:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.EqualOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 36:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.GreaterThanOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 37:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.GreaterThanOrEqualOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 38:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.LessThanOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 39:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.LessThanOrEqualOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 40:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.NotEqualOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 42:
		{
			yyVAL.item = &ast.Literal{Type: sql.StringType, Value: yyS[yypt-1].ident + "%"}
		}
	case 43:
		{
			yyVAL.item = &ast.Literal{Type: sql.StringType, Value: "%" + yyS[yypt-1].ident + "%"}
		}
	case 44:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.LikeOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].item.(ast.Expression)},
			}
		}
	case 46:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.AddOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 47:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.SubtractOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 48:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.MultiplyOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 49:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.DivideOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 50:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.ModuloOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 51:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.ExponentiateOper{L: yyS[yypt-2].expr, R: yyS[yypt-0].expr},
			}
		}
	case 52:
		{
			yyVAL.expr = &ast.Operation{
				Operation: &ast.FactorialOper{L: yyS[yypt-0].expr},
			}
		}
	case 54:
		{
			yyVAL.expr = &ast.Field{ColumnName: model.LowStr(yyS[yypt-0].ident)}
		}
	case 55:
		{
			yyVAL.expr = &ast.Field{
				TableName:  model.LowStr(yyS[yypt-2].ident),
				ColumnName: model.LowStr(yyS[yypt-0].ident),
			}
		}
	case 56:
		{
			yyVAL.expr = &ast.Literal{Type: sql.NullType}
		}
	case 57:
		{
			yyVAL.expr = &ast.Literal{Type: sql.FloatType, Value: yyS[yypt-0].item}
		}
	case 58:
		{
			yyVAL.expr = &ast.Literal{Type: sql.IntType, Value: yyS[yypt-0].item}
		}
	case 59:
		{
			yyVAL.expr = &ast.Literal{Type: sql.StringType, Value: yyS[yypt-0].ident}
		}
	case 60:
		{
			yyVAL.expr = &ast.Literal{Type: sql.BoolType, Value: true}
		}
	case 61:
		{
			yyVAL.expr = &ast.Literal{Type: sql.BoolType, Value: false}
		}
	case 64:
		{
			yyVAL.expr = yyS[yypt-0].expr.(ast.Expression)
		}
	case 65:
		{
			yyVAL.expr = &ast.Function{FuncName: model.LowStr("AVG"), Args: []ast.Expression{yyS[yypt-1].expr}}
		}
	case 66:
		{
			yyVAL.expr = &ast.Function{FuncName: model.LowStr("COUNT"), Args: []ast.Expression{yyS[yypt-1].expr}}
		}
	case 67:
		{
			expr := &ast.Literal{Type: sql.BoolType, Value: true}
			yyVAL.expr = &ast.Function{FuncName: model.LowStr("COUNT"), Args: []ast.Expression{expr}}
		}
	case 68:
		{
			yyVAL.expr = &ast.Function{FuncName: model.LowStr("SUM"), Args: []ast.Expression{yyS[yypt-1].expr}}
		}
	case 69:
		{
			yyVAL.expr = &ast.Function{FuncName: model.LowStr("MAX"), Args: []ast.Expression{yyS[yypt-1].expr}}
		}
	case 70:
		{
			yyVAL.expr = &ast.Function{FuncName: model.LowStr("MIN"), Args: []ast.Expression{yyS[yypt-1].expr}}
		}
	case 77:
		{
			var fromList []ast.FromItem
			yyVAL.item = fromList
		}
	case 78:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 79:
		{
			var fromList []ast.FromItem
			from := yyS[yypt-0].item.(ast.FromItem)
			yyVAL.item = append(fromList, from)
		}
	case 80:
		{
			fromList1 := yyS[yypt-2].item.([]ast.FromItem)
			var fromList2 []ast.FromItem
			from := yyS[yypt-0].item.(ast.FromItem)
			fromList2 = append(fromList2, from)
			yyVAL.item = append(fromList1, fromList2...)
		}
	case 81:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 82:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 83:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 84:
		{
			yyVAL.item = &ast.FromItemTable{Name: yyS[yypt-1].item.(string), Alias: yyS[yypt-0].item.(string)}
		}
	case 85:
		{
			yyVAL.item = model.LowStr(yyS[yypt-0].ident)
		}
	case 86:
		{
			yyVAL.item = ""
		}
	case 87:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 88:
		{
			yyVAL.item = model.LowStr(yyS[yypt-0].ident)
		}
	case 89:
		{
			yyVAL.item = model.LowStr(yyS[yypt-0].ident)
		}
	case 90:
		{
			yyVAL.item = &ast.FromItemJoinTable{Left: yyS[yypt-2].item.(ast.FromItem), Right: yyS[yypt-0].item.(ast.FromItem), Type: ast.CrossJoin}
		}
	case 91:
		{
			yyVAL.item = &ast.FromItemJoinTable{Left: yyS[yypt-4].item.(ast.FromItem), Right: yyS[yypt-2].item.(ast.FromItem), Type: ast.InnerJoin, Predicate: yyS[yypt-0].expr}
		}
	case 92:
		{
			yyVAL.item = &ast.FromItemJoinTable{Left: yyS[yypt-4].item.(ast.FromItem), Right: yyS[yypt-2].item.(ast.FromItem), Type: yyS[yypt-3].item.(ast.JoinType), Predicate: yyS[yypt-0].expr}
		}
	case 93:
		{
			yyVAL.item = ast.CrossJoin
		}
	case 94:
		{
			yyVAL.item = ast.InnerJoin
		}
	case 95:
		{
			yyVAL.item = ast.InnerJoin
		}
	case 96:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 97:
		{
			yyVAL.item = yyS[yypt-2].item
		}
	case 98:
		{
			yyVAL.item = ast.LeftJoin
		}
	case 99:
		{
			yyVAL.item = ast.RightJoin
		}
	case 100:
		{
			yyVAL.item = nil
		}
	case 101:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 102:
		{
			yyVAL.item = yyS[yypt-0].expr
		}
	case 103:
		{
			yyVAL.item = nil
		}
	case 105:
		{
			var list []ast.Expression
			yyVAL.item = append(list, yyS[yypt-0].expr)
		}
	case 106:
		{
			list1 := yyS[yypt-2].item.([]ast.Expression)
			list2 := yyS[yypt-0].expr
			yyVAL.item = append(list1, list2)
		}
	case 107:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 108:
		{
			var orderList []*ast.Order
			order := yyS[yypt-0].item.(*ast.Order)
			yyVAL.item = append(orderList, order)
		}
	case 109:
		{
			list1 := yyS[yypt-2].item.([]*ast.Order)
			list2 := yyS[yypt-0].item.(*ast.Order)
			yyVAL.item = append(list1, list2)
		}
	case 110:
		{
			yyVAL.item = &ast.Order{Expr: yyS[yypt-1].expr, Desc: yyS[yypt-0].item.(bool)}
		}
	case 111:
		{
			yyVAL.item = false // ASC by default
		}
	case 112:
		{
			yyVAL.item = false
		}
	case 113:
		{
			yyVAL.item = true
		}
	case 114:
		{
			yyVAL.item = nil
		}
	case 115:
		{
			yyVAL.item = yyS[yypt-0].expr
		}
	case 116:
		{
			yyVAL.item = nil
		}
	case 117:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 118:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 119:
		{
			yyVAL.item = nil
		}
	case 120:
		{
			yyVAL.item = yyS[yypt-0].expr
		}
	case 121:
		{
			yyVAL.item = nil
		}
	case 122:
		{
			yyVAL.item = yyS[yypt-0].expr
		}
	case 123:
		{
			var err error
			err = valiDate(yyS[yypt-1].item.([]*ast.Column))
			if err != nil {
				yylex.Error(err.Error())
				return -9
			}

			yyVAL.statement = &ast.CreateStmt{
				Name:    yyS[yypt-3].item.(string),
				Columns: yyS[yypt-1].item.([]*ast.Column),
			}
		}
	case 124:
		{
			yyVAL.item = false
		}
	case 125:
		{
			yyVAL.item = true
		}
	case 126:
		{
			yyVAL.item = []*ast.Column{yyS[yypt-0].item.(*ast.Column)}
		}
	case 127:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*ast.Column), yyS[yypt-0].item.(*ast.Column))
		}
	case 128:
		{

			var err error
			err = handleConstraint(yyS[yypt-2].item.([]*ast.Column), yyS[yypt-0].item.(*ast.Constraint))
			if err != nil {
				yylex.Error(err.Error())
				return -8
			}
			yyVAL.item = yyS[yypt-2].item.([]*ast.Column)
		}
	case 129:
		{
			var column ast.Column
			var err error
			column.Name = yyS[yypt-2].item.(string)
			column.ColumnType = yyS[yypt-1].item.(sql.DataType)
			column.Nullable = true
			err = handleColumn(yyS[yypt-0].item.([]*ast.ColumnOption), &column)
			if err != nil {
				yylex.Error(err.Error())
				return -7
			}
			yyVAL.item = &column
		}
	case 130:
		{
			yyVAL.item = sql.StringType
		}
	case 131:
		{
			yyVAL.item = sql.StringType
		}
	case 132:
		{
			yyVAL.item = sql.StringType
		}
	case 133:
		{
			yyVAL.item = sql.BoolType
		}
	case 134:
		{
			yyVAL.item = sql.BoolType
		}
	case 135:
		{
			yyVAL.item = sql.FloatType
		}
	case 136:
		{
			yyVAL.item = sql.FloatType
		}
	case 137:
		{
			yyVAL.item = sql.IntType
		}
	case 138:
		{
			yyVAL.item = sql.IntType
		}
	case 139:
		{
			var columnOptions []*ast.ColumnOption
			yyVAL.item = columnOptions
		}
	case 140:
		{
			yyVAL.item = append(yyS[yypt-1].item.([]*ast.ColumnOption), yyS[yypt-0].item.(*ast.ColumnOption))
		}
	case 141:
		{
			option := &ast.ColumnOption{
				Type: ast.NOTNULL,
			}
			yyVAL.item = option
		}
	case 142:
		{
			option := &ast.ColumnOption{
				Type: ast.NULL,
			}
			yyVAL.item = option
		}
	case 143:
		{
			option := &ast.ColumnOption{
				Type: ast.PRIMARYKEY,
			}
			yyVAL.item = option
		}
	case 144:
		{
			option := &ast.ColumnOption{
				Type:  ast.DEFAULT,
				Value: yyS[yypt-0].expr,
			}
			yyVAL.item = option
		}
	case 145:
		{
			option := &ast.ColumnOption{
				Type: ast.UNIQUE,
			}
			yyVAL.item = option
		}
	case 146:
		{
			yyVAL.item = model.LowStr(yyS[yypt-0].ident)
		}
	case 147:
		{
			yyVAL.item = int(yyS[yypt-1].item.(uint64))
		}
	case 148:
		{
			yyVAL.item = getUint64FromNUM(yyS[yypt-0].item)
		}
	case 149:
		{
			yyVAL.item = getUint64FromNUM(yyS[yypt-0].item)
		}
	case 150:
		{
			yyVAL.item = uint64(0)
		}
	case 152:
		{
			yyVAL.item = model.LowStr(yyS[yypt-0].ident)
		}
	case 153:
		{
			yyVAL.item = ""
		}
	case 154:
		{
			yyVAL.item = model.LowStr(yyS[yypt-0].ident)
		}
	case 155:
		{
			yyVAL.item = &ast.Constraint{Type: ast.PRIMARYKEYConstraint, ColumnName: yyS[yypt-1].item.(string)}
		}
	case 156:
		{
			yyVAL.item = &ast.Constraint{Type: ast.UNIQUEKEYConstraint, IndexName: yyS[yypt-3].item.(string), ColumnName: yyS[yypt-1].item.(string)}
		}
	case 157:
		{
			yyVAL.item = &ast.Constraint{Type: ast.KEYConstraint, IndexName: yyS[yypt-3].item.(string), ColumnName: yyS[yypt-1].item.(string)}
		}
	case 158:
		{
			yyVAL.item = &ast.Constraint{
				Type:          ast.FORREGINKEYConstraint,
				IndexName:     yyS[yypt-8].item.(string),
				SubColumnName: yyS[yypt-6].item.(string),
				ColumnName:    yyS[yypt-1].item.(string),
				TableName:     yyS[yypt-3].item.(string),
			}
		}
	case 159:
		{
			yyVAL.item = &ast.ExprColumn{ColumnName: yyS[yypt-2].item.(string), Expr: yyS[yypt-0].expr.(ast.Expression)}
		}
	case 160:
		{
			yyVAL.item = []*ast.ExprColumn{yyS[yypt-0].item.(*ast.ExprColumn)}
		}
	case 161:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*ast.ExprColumn), yyS[yypt-0].item.(*ast.ExprColumn))
		}
	case 162:
		{
			stmt := &ast.UpdateStmt{
				TableName: yyS[yypt-3].item.(string),
				Set:       yyS[yypt-1].item.([]*ast.ExprColumn),
			}

			if yyS[yypt-0].item != nil {
				stmt.Where = yyS[yypt-0].item.(ast.Expression)
			}
			yyVAL.statement = stmt
		}
	case 165:
		{
			yyVAL.item = []string{yyS[yypt-0].item.(string)}
		}
	case 166:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]string), yyS[yypt-0].item.(string))
		}
	case 167:
		{
			yyVAL.item = []string{}
		}
	case 168:
		{
			yyVAL.item = yyS[yypt-1].item.([]string)
		}
	case 171:
		{
			yyVAL.item = [][]ast.Expression{yyS[yypt-0].item.([]ast.Expression)}
		}
	case 172:
		{
			yyVAL.item = append(yyS[yypt-2].item.([][]ast.Expression), yyS[yypt-0].item.([]ast.Expression))
		}
	case 173:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 174:
		{
			yyVAL.item = []ast.Expression{}
		}
	case 176:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]ast.Expression), yyS[yypt-0].expr)
		}
	case 177:
		{
			yyVAL.item = []ast.Expression{yyS[yypt-0].expr}
		}
	case 178:
		{
			stmt := &ast.InsertStmt{
				TableName: yyS[yypt-3].item.(string),
				Columns:   yyS[yypt-2].item.([]string),
				Values:    yyS[yypt-0].item.([][]ast.Expression),
			}

			yyVAL.statement = stmt
		}
	case 181:
		{
			yyVAL.item = true
		}
	case 182:
		{
			yyVAL.item = false
		}
	case 183:
		{
			yyVAL.item = false
		}
	case 184:
		{
			stmt := &ast.BeginStmt{
				ReadOnly: yyS[yypt-1].item.(bool),
				AsOf:     yyS[yypt-0].item.(uint64),
			}
			yyVAL.statement = stmt
		}
	case 185:
		{
			stmt := &ast.BeginStmt{
				ReadOnly: true,
			}
			yyVAL.statement = stmt
		}
	case 186:
		{
			stmt := &ast.CommitStmt{}
			yyVAL.statement = stmt
		}
	case 187:
		{
			stmt := &ast.RollbackStmt{}
			yyVAL.statement = stmt
		}
	case 188:
		{
			stmt := &ast.ExplainStmt{
				Stmt: yyS[yypt-0].statement.(ast.Stmt),
			}
			yyVAL.statement = stmt
		}
	case 189:
		{
			stmt := &ast.DropTableStmt{
				TableName: yyS[yypt-0].item.(string),
			}
			yyVAL.statement = stmt
		}
	case 190:
		{
			stmt := &ast.DeleteStmt{
				TableName: yyS[yypt-2].item.(string),
				Where:     yyS[yypt-0].expr.(ast.Expression),
			}
			yyVAL.statement = stmt
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
